# Resultsdb_updater template
#
# To create an environment from the template, process and apply it:
#   oc process -f openshift/resultsdb-updater-test-template.yaml -p TEST_ID=123 | oc apply -f -
# To clean up the environment, use a selector on the environment label:
#   oc delete all -l environment=test-123
# Or use the app label to delete things related to resultsdb-updater:
#   oc delete all -l app=resultsdb-updater

---
apiVersion: v1
kind: Template
metadata:
  name: resultsdb-updater-test-template
parameters:
- name: TEST_ID
  displayName: Test id
  description: Short unique identifier for this test run (e.g. Jenkins job number)
  required: true
- name: RESULTSDB_UPDATER_IMAGE
  displayName: ResultsDB Updater container image
  description: Image to be used for ResultsDB Updater deployement
  value: 172.30.1.1:5000/myproject/resultsdb-updater:latest
  required: true
- name: RESULTSDB_API_URL
  displayname: Resultsdb API URL
  description: API URL for Resultsdb
  required: true
- name: RESULTSDB_UPDATER_USERNAME
  displayName: ResultsDB updater user name
  description: ResultsDB updater user name to connect to the message bus
  value: resultsdb-updater
  required: true
- name: RESULTSDB_UPDATER_PASSWORD
  displayName: Resultsdb updater user password
  description: Resultsdb updater user password to connect to the message bus
  generate: expression
  from: "[\\w]{32}"
- name: STOMP_URI
  displayName: Messagebus URI
  description: Messagebus URI
  required: true
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: "resultsdb-updater-test-${TEST_ID}-secret"
    labels:
      app: "resultsdb-updater"
      environment: "test-${TEST_ID}"
  stringData:
    resultsdb-updater.py: |-
      import logging
      config = {
        'ciconsumer': True,
        'zmq_enabled': False,
        'endpoints': {},
        'validate_signatures': False,
        'stomp_heartbeat': 1000,
        'stomp_uri': '${STOMP_URI}',
        # 'stomp_user': '${RESULTSDB_UPDATER_USERNAME}',
        # 'stomp_pass': '${RESULTSDB_UPDATER_PASSWORD}',
        'stomp_ssl_crt': '/etc/resultsdb/umb-consumer.crt.pem',
        'stomp_ssl_key': '/etc/resultsdb/umb-consumer.key.pem',
        'resultsdb-updater.log_level': logging.DEBUG,
        'resultsdb-updater.resultsdb_api_url': '${RESULTSDB_API_URL}',
        # TODO make certificate verification work
        'resultsdb-updater.resultsdb_api_ca': False,
        'resultsdb-updater.resultsdb_user': 'resultsdb-updater',
        'resultsdb-updater.resultsdb_pass': 'password',
        'resultsdb-updater.resultsdb_api_invalid_msg_publisher_ids': (
            None,
            'msg-rh-jenkins-ci-plugin',
        ),
        'resultsdb-updater.topics': ["/queue/Consumer.mister.queue.VirtualTopic.Test"],
        'moksha.blocking_mode': True,
      }
- apiVersion: v1
  kind: Secret
  metadata:
    name: "resultsdb-updater-test-${TEST_ID}-certs"
    labels:
      app: "resultsdb-updater"
      environment: "test-${TEST_ID}"
  data:
    umb-consumer.crt.pem: |-
      QmFnIEF0dHJpYnV0ZXMKICAgIGZyaWVuZGx5TmFtZTogbXNnLXVtYi1kb2NrZXItY29uc3VtZXIZcyBSZWQgSGF0IElECiAgICBsb2NhbEtleUlEOiAyRSA4QiA2MyBBNiBFRiAyNCBDMiAwQiBDOCAxOCAyQyBDNiA0QSA4MiA3NiA2NCA4OCA2RiAyRCA2NiAKc3ViamVjdD0vREM9Y29tL0RDPXJlZGhhdC9PVT1tZXNzYWdpbmcvT1U9c2VydmljZXVzZXJzL1VJRD1tc2ctdW1iLWRvY2tlci1jb25zdW1lci9MPW5vbi1wcm9kL0NOPW1zZy11bWItZG9ja2VyLWNvbnN1bWVyCmlzc3Vlcj0vTz1SZWQgSGF0L09VPXByb2QvQ049Q2VydGlmaWNhdGUgQXV0aG9yaXR5Ci0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFQlRDQ0F1MmdBd0lCQWdJQ0lWVXdEUVlKS29aSWh2Y05BUUVMQlFBd1FURVFNQTRHQTFVRUNnd0hVbVZrCklFaGhkREVOTUFzR0ExVUVDd3dFY0hKdlpERWVNQndHQTFVRUF3d1ZRMlZ5ZEdsbWFXTmhkR1VnUVhWMGFHOXkKYVhSNU1CNFhEVEU0TURNeE16RTNNamN4TlZvWERUSXdNRE14TWpFM01qY3hOVm93Z2JZeEV6QVJCZ29Ka2lhSgprL0lzWkFFWkZnTmpiMjB4RmpBVUJnb0praWFKay9Jc1pBRVpGZ1p5WldSb1lYUXhFakFRQmdOVkJBc01DVzFsCmMzTmhaMmx1WnpFVk1CTUdBMVVFQ3d3TWMyVnlkbWxqWlhWelpYSnpNU2N3SlFZS0NaSW1pWlB5TEdRQkFRd1gKYlhObkxYVnRZaTFrYjJOclpYSXRZMjl1YzNWdFpYSXhFVEFQQmdOVkJBY01DRzV2Ymkxd2NtOWtNU0F3SGdZRApWUVFEREJkdGMyY3RkVzFpTFdSdlkydGxjaTFqYjI1emRXMWxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBTHJ4VkpkNG5MREV3eitRbXFBcVNhbVBRa3d2dFBKOUtwNktHUUhBWjFYdEV3NngKUUwyNGlSSGFtRjNKTmdpTkhDekFuaE51NDkwcnlVbmd4TzlVeDFIcFFwT0RGVVFKZTgyZWV2VFZTcWh3N0VtUQpucU56ditPY3VaSXh1TXhWMzZPalZzcks1N2s1UU4zd3U3R2I3VkVid0dYWE5jYmdjNlF3VGMvdDdSRTN3ZWxJCkxxZXJJVUhxdjc5N2FNYW9ISzZoQUJyeFhkRlI4bVl6Vzh4bmdvUy8xTnBRUkJ4TTFqaW5CMlNOWmgvSWcxUngKeE92dis5UU5sQjkvMjFiZStlQW12Y3pTYWxMM0xoQ2VkZ0VBVFdYZGJKRTZZMUR5NWVPd1BaSHlqK3hTVEh6NQoxWFFvZHVBbEx3TjVzcDlzL1VhcVZWSzdHQzA1WkV4TXJnUGhOY3NDQXdFQUFhT0JrRENCalRBZkJnTlZIU01FCkdEQVdnQlI3MmduMVNWM1oxMXpKTnZoVjBodVhuaEV2ZmpBN0JnZ3JCZ0VGQlFjQkFRUXZNQzB3S3dZSUt3WUIKQlFVSE1BR0dIMmgwZEhBNkx5OXZZM053TG5KbFpHaGhkQzVqYjIwdlkyRXZiMk56Y0M4d0RnWURWUjBQQVFILwpCQVFEQWdYZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RCREFOQmdrcWhraUc5dzBCCkFRc0ZBQU9DQVFFQXNlTkRZRTVXdEdVenU3d2gyR2MvS1ZaWDUva2xmRkFZQUpxVmwzVlllRHlMVEZWM0tSR20KS0YzU2tBelZqNW1ReFkzdHBncWdtTU1ibUQyTURwK0xWaGY3OEZyMkYxdjRWUENINFJNdnpqNGpMTk5wTDJabgo3WWIzZDQ2WGxCcFNSbXEya3RmejUxSjVOZHZTRGc1ZnpBUU1DWGJzbTVhTHN6dDhYZFo4OXphbnVZRzdZMUpjClllK3hneEVSVThPWEN5aDBoUzR5dHd1a29rdDkzMExLcUhCWXhoMDN0ZXhMZ1NucW5FRGdESnBkYk1OVjJJeW8KUmNaQ1hPNzZKM0RPKzhROTI3U01VUWtRZmdpamt5QURVd1hOUkpSLzZtSks5SGNwclpJUUpvQ3NSTWpzbUVjaApTeVlRSnRjN255M2RNdm1qK3AwNFpOQ2t0bTBBZ1Q5cXNnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    umb-consumer.key.pem: |-
      QmFnIEF0dHJpYnV0ZXMKICAgIGZyaWVuZGx5TmFtZTogbXNnLXVtYi1kb2NrZXItY29uc3VtZXIZcyBSZWQgSGF0IElECiAgICBsb2NhbEtleUlEOiAyRSA4QiA2MyBBNiBFRiAyNCBDMiAwQiBDOCAxOCAyQyBDNiA0QSA4MiA3NiA2NCA4OCA2RiAyRCA2NiAKS2V5IEF0dHJpYnV0ZXM6IDxObyBBdHRyaWJ1dGVzPgotLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS0KTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDNjhWU1hlSnl3eE1NLwprSnFnS2ttcGowSk1MN1R5ZlNxZWloa0J3R2RWN1JNT3NVQzl1SWtSMnBoZHlUWUlqUndzd0o0VGJ1UGRLOGxKCjRNVHZWTWRSNlVLVGd4VkVDWHZObm5yMDFVcW9jT3hKa0o2amM3L2puTG1TTWJqTVZkK2pvMWJLeXVlNU9VRGQKOEx1eG0rMVJHOEJsMXpYRzRIT2tNRTNQN2UwUk44SHBTQzZucXlGQjZyKy9lMmpHcUJ5dW9RQWE4VjNSVWZKbQpNMXZNWjRLRXY5VGFVRVFjVE5ZNHB3ZGtqV1lmeUlOVWNjVHI3L3ZVRFpRZmY5dFczdm5nSnIzTTBtcFM5eTRRCm5uWUJBRTFsM1d5Uk9tTlE4dVhqc0QyUjhvL3NVa3g4K2RWMEtIYmdKUzhEZWJLZmJQMUdxbFZTdXhndE9XUk0KVEs0RDRUWExBZ01CQUFFQ2dnRUFCKy9nSGhBK1l0anZ5ejZaK2d2aGxjUGgxamMrVVA5VWRHZTdtUkh3c1RyQQpFT01nc3cxbk1HMWVBN2xieEhBdFRvOGRCd2t4dm4yeDdhT1A2UE5xQlFYSTBGZUQ2eUFWOUF4eS92c2hVTlorCmliOE1wVGJ3WWpzUXUrN0ZnRk56QzlFUENjd2ttMzRkVFc3L29SSlVPSm5iaU5kaXpwOVArWndkYWFNWjZoMm4Kem5MNGcwU1V2cnBoVHU5SElWeXQ0UTRVQU5vVDVzbk1rQzF2MFVGR3FGNlZ5K292Um10K0RlU2RKUzVPV2VLdAo3RnNSa3NEVGRQSHBsRmRQLzRqdnMrSG9KaTEyaTJHOENVZVZGWFEvSU8wTkNHdEVCcjVMYmJZcExrbUN1c1BNCjNBZXkzSU9BOE9uclRYSlpnb0lNOGNKZzdtRTNPaUd2K3lwZXhIeHZlUUtCZ1FEcENweHE2blROLzFEaDNENzEKNjg5NGs0NHEydkJDeUJSTjRTSUFnc2tJTkJuczFnaVVPdzZtdExXdlhQTzZiWmZXQSs5eEovb20xbWpQcXllQQpMQXVkeUw3eEdiQytVd2NQYUhrUmpVTG8rZ2Y3ZjJNWGhvalZ3bVp3S2hSWmJvRDlnNmtkdk1mTmxkSkNUZGtXCkExNGs1Vk0renZrVzBRcGxINHJ6dUVadVF3S0JnUUROWEJla2I1azZXRUdoeDhQZk9PUTJHQXFYNDlyeVlnRjgKYUl2enJJT3FzZzY2cUxFeW0zckZ1TWlKYUpPWWN4NXVrSmNnWmRtUlRCYTJLNndZSEZkUktPQkdnVFdSK2gyMwpEem1sVDdDa1pOTXcvZkRWQTJHSmI2ckl0K1MrV3YzVHFKOXZ5OFRQdFp6cjhKWnpDWDJmTjYzSXArYlh5ZHdYClZ0eXc0TkRWMlFLQmdBamp3cnZCWGR0TjFnUUhwczh5dzZOUjNhWjgyNVZ3bEhXMEZOdjRJVHNTNGJwTEgrQ24Kc0JOajZWcGJMV0Q3TlVPUXV0MlNMTlMyY1NFYTRsTGRXMFFWbUZNU0s4L1cwdm9mZmg3UlNMQWllWk42ZElrOQpOSk1TNjExei9YcTc0R2ZMVWZRMGMxckFVRmovSnp6VHZBK2tQOXl4Z0ljQ1NtYzVJTS9UUTd5SkFvR0FYRFA2CkJZRjV5Y0Z3am1PejVSaVZGbGlMQVJGejc1bmpVdWxaMU9saklKUGJteUU4bGgxSzdWVis3SHNBc2RVV0Y4eGgKbmxFOGMwazNkVWw4ZGtMYlRYeE4zam9MUkdTSlRQVFFEQklRbkc4TWg1V3N1T2RRdHJWbGQ4TmhON3FBOXJSaQpDWDd5K2ROd0JsczZJYUprUGNWeENJT2lXTWF3UStaakppTjZnRmtDZ1lFQWdCeWZUTjBIWGtRdy9odE9yUkNmCnF3UGw1NXd0UXB1K3BQaWlmZElLYk5PQXJ2Mmk4SU5EMEd6Q0tGNTlKRDU3cWJyWUUvcngzT3hOZEFFOFVWZjgKalAzZFN5YUw3TElhcDV6V0JqZTdFQSt1M2NDMERKNHJZSmxFMExwaUVEQmdkUHExRmc4Vm9xSFBubXJOSURTUwowNnREb2cvc2xsa1NqdVk1ZTdrV3BWZz0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "resultsdb-updater-test-${TEST_ID}"
    labels:
      app: "resultsdb-updater"
      environment: "test-${TEST_ID}"
  spec:
    replicas: 1
    selector:
      app: "resultsdb-updater"
      environment: "test-${TEST_ID}"
    template:
      metadata:
        labels:
          app: "resultsdb-updater"
          environment: "test-${TEST_ID}"
      spec:
        containers:
        - name: resultsdb-updater
          image: "${RESULTSDB_UPDATER_IMAGE}"
          imagePullPolicy: Always
          volumeMounts:
          - name: resultsdb-updater-config-volume
            mountPath: /etc/fedmsg.d
            readOnly: true
          - name: resultsdb-updater-certs
            mountPath: /etc/resultsdb
            readOnly: true
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 300m
              memory: 384Mi
          # TODO: readinessProbe and livenessProbe (is it possible?)
        volumes:
        - name: resultsdb-updater-config-volume
          secret:
            secretName: "resultsdb-updater-test-${TEST_ID}-secret"
            items:
            - key: resultsdb-updater.py
              path: updater.py
        - name: resultsdb-updater-certs
          secret:
            secretName: "resultsdb-updater-test-${TEST_ID}-certs"
            items:
            - key: umb-consumer.crt.pem
              path: umb-consumer.crt.pem
            - key: umb-consumer.key.pem
              path: umb-consumer.key.pem
    triggers:
    - type: ConfigChange
